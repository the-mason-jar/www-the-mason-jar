{
  "name": "emits",
  "version": "1.0.2",
  "description": "returns a function which will emit and parse the specified event",
  "main": "index.js",
  "scripts": {
    "test": "mocha test.js",
    "coverage": "istanbul cover node_modules/.bin/_mocha -- test.js",
    "test-travis": "istanbul cover node_modules/.bin/_mocha --report lcovonly -- test.js"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/primus/emits.git"
  },
  "keywords": [
    "emits",
    "event",
    "parser",
    "eventemitter"
  ],
  "author": {
    "name": "Arnout Kazemier"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/primus/emits/issues"
  },
  "homepage": "https://github.com/primus/emits",
  "devDependencies": {
    "assume": "0.0.x",
    "istanbul": "0.3.x",
    "mocha": "2.1.x",
    "pre-commit": "0.0.x"
  },
  "readme": "# emits\n\n[![Version npm](http://img.shields.io/npm/v/emits.svg?style=flat-square)](http://browsenpm.org/package/emits)[![Build Status](http://img.shields.io/travis/primus/emits/master.svg?style=flat-square)](https://travis-ci.org/primus/emits)[![Dependencies](https://img.shields.io/david/primus/emits.svg?style=flat-square)](https://david-dm.org/primus/emits)[![Coverage Status](http://img.shields.io/coveralls/primus/emits/master.svg?style=flat-square)](https://coveralls.io/r/primus/emits?branch=master)[![IRC channel](http://img.shields.io/badge/IRC-irc.freenode.net%23primus-00a8ff.svg?style=flat-square)](http://webchat.freenode.net/?channels=primus)\n\n## Installation\n\nThis module is compatible with browserify and node.js and is therefore released\nthrough npm:\n\n```\nnpm install --save emits\n```\n\n## Usage\n\nIn all examples we assume that you've assigned the `emits` function to the\nprototype of your class. This class should inherit from an `EventEmitter` class\nwhich uses the `emit` function to emit events and the `listeners` method to list\nthe listeners of a given event. For example:\n\n```js\n'use strict';\n\nvar EventEmitter = require('events').EventEmitter\n  , emits = require('emits');\n\nfunction Example() {\n  EventEmitter.call(this);\n}\n\nrequire('util').inherits(Example, EventEmitter);\n\n//\n// You can directly assign the function to the prototype if you wish or store it\n// in a variable and then assign it to the prototype. What pleases you more.\n//\nExample.prototype.emits = emits; // require('emits');\n\n//\n// Also initialize the example so we can use the assigned method.\n//\nvar example = new Example();\n```\n\nNow that we've set up our example code we can finally demonstrate the beauty of\nthis functionality. To create a function that emits `data` we can simply do:\n\n```js\nvar data = example.emits('data');\n```\n\nEvery time you invoke the `data()` function it will emit the `data` event with\nall the arguments you supplied. If you want to \"curry\" some extra arguments you\ncan add those after the event name:\n\n```js\nvar data = example.emits('data', 'foo');\n```\n\nNow when you call `data()` the `data` event will receive `foo` as first argument\nand the rest of the arguments would be the ones that you've supplied to the\n`data()` function.\n\nIf you supply a function as last argument we assume that this is an argument\nparser. This allows you to modify arguments, prevent the emit of the event or\njust clear all supplied arguments (except for the ones that are curried in).\n\n```js\nvar data = example.emits('data', function parser(arg) {\n  return 'bar';\n})\n```\n\nIn the example above we've transformed the incoming argument to `bar`. So when\nyou call `data()` it will emit a `data` event with `bar` as the only argument.\n\nTo prevent the emitting from happening you need to return the `parser` function\nthat you supplied. This is the only reliable way to determine if we need to\nprevent an emit:\n\n```js\nvar data = example.emits('data', function parser() {\n  return parser;\n});\n```\n\nIf you return `undefined` from the parser we assume that no modification have\nbeen made to the arguments and we should emit our received arguments. If `null`\nis returned we assume that all received arguments should be removed.\n\n### Patterns\n\nIn Primus the most common pattern for this module is to proxy events from one\ninstance to another:\n\n```js\neventemitter.on('data', example.emits('data'));\n```\n\nIt is also very useful to re-format data. For example, in the case of WebSockets,\nif we don't want to reference `evt.data` every time we need to access the data,\nwe can parse the argument as following:\n\n```js\nvar ws = new WebSocket('wss://example.org/path');\nws.onmessage = example.emits('data', function parser(evt) {\n  return evt.data;\n});\n```\n\nIn the example above we will now emit the `data` event with a direct reference\nto `evt.data`. The following final example shows how you can prevent events\nfrom being emitted.\n\n```js\nvar ws = new WebSocket('wss://example.org/path');\nws.onmessage = example.emits('data', function parser(evt) {\n  var data;\n\n  try { data = JSON.parse(evt.data); }\n  catch (e) { return parser; }\n\n  if ('object' !== typeof data || Array.isArray(data)) {\n    return parser;\n  }\n\n  return data;\n});\n```\n\nBy returning a reference to the parser we tell the emit function that we\ndon't want to emit the event. So the `data` event will only be fired if\nwe've received a valid JSON document from the server and it's an object.\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "emits@1.0.2",
  "_from": "emits@>=1.0.0 <1.1.0"
}
