{
  "title": "Safe PS",
  "name": "safeps",
  "version": "2.2.13",
  "description": "Work with processes safely and easily with Node.js",
  "homepage": "https://github.com/bevry/safeps",
  "license": {
    "type": "MIT"
  },
  "badges": {
    "travis": true,
    "npm": true,
    "npmdownloads": true,
    "david": true,
    "daviddev": true,
    "gratipay": "bevry",
    "flattr": "344188/balupton-on-Flattr",
    "paypal": "QB8GQPZAH84N6",
    "bitcoin": "https://coinbase.com/checkouts/9ef59f5479eec1d97d63382c9ebcb93a",
    "wishlist": "http://amzn.com/w/2F8TXKSNAFG4V"
  },
  "keywords": [
    "ps",
    "process",
    "openProcess",
    "closeProcess",
    "spawn",
    "exec",
    "child_process"
  ],
  "author": {
    "name": "2013+ Bevry Pty Ltd",
    "email": "us@bevry.me",
    "url": "http://bevry.me"
  },
  "maintainers": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    }
  ],
  "contributors": [
    {
      "name": "Benjamin Lupton",
      "email": "b@lupton.cc",
      "url": "https://github.com/balupton"
    },
    {
      "name": "giodamelio",
      "url": "https://github.com/giodamelio"
    },
    {
      "name": "sfrdmn",
      "url": "https://github.com/sfrdmn"
    }
  ],
  "bugs": {
    "url": "https://github.com/bevry/safeps/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/bevry/safeps.git"
  },
  "engines": {
    "node": ">=0.4"
  },
  "dependencies": {
    "typechecker": "^2.0.8",
    "safefs": "^3.1.0",
    "taskgroup": "^4.2.0",
    "extract-opts": "^2.2.0"
  },
  "devDependencies": {
    "coffee-script": "^1.9.0",
    "joe": "^1.6.0",
    "joe-reporter-console": "^1.2.1",
    "chai": "^1.10.0",
    "projectz": "^0.3.17"
  },
  "directories": {
    "lib": "./out/lib"
  },
  "scripts": {
    "preinstall": "node ./cyclic.js",
    "test": "node ./out/test/safeps-test.js"
  },
  "main": "./out/lib/safeps.js",
  "cakeConfiguration": {
    "COFFEE_SRC_PATH": "src"
  },
  "readme": "\n<!-- TITLE/ -->\n\n# Safe PS\n\n<!-- /TITLE -->\n\n\n<!-- BADGES/ -->\n\n[![Build Status](https://img.shields.io/travis/bevry/safeps/master.svg)](http://travis-ci.org/bevry/safeps \"Check this project's build status on TravisCI\")\n[![NPM version](https://img.shields.io/npm/v/safeps.svg)](https://npmjs.org/package/safeps \"View this project on NPM\")\n[![NPM downloads](https://img.shields.io/npm/dm/safeps.svg)](https://npmjs.org/package/safeps \"View this project on NPM\")\n[![Dependency Status](https://img.shields.io/david/bevry/safeps.svg)](https://david-dm.org/bevry/safeps)\n[![Dev Dependency Status](https://img.shields.io/david/dev/bevry/safeps.svg)](https://david-dm.org/bevry/safeps#info=devDependencies)<br/>\n[![Gratipay donate button](https://img.shields.io/gratipay/bevry.svg)](https://www.gratipay.com/bevry/ \"Donate weekly to this project using Gratipay\")\n[![Flattr donate button](https://img.shields.io/badge/flattr-donate-yellow.svg)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n[![BitCoin donate button](https://img.shields.io/badge/bitcoin-donate-yellow.svg)](https://coinbase.com/checkouts/9ef59f5479eec1d97d63382c9ebcb93a \"Donate once-off to this project using BitCoin\")\n[![Wishlist browse button](https://img.shields.io/badge/wishlist-donate-yellow.svg)](http://amzn.com/w/2F8TXKSNAFG4V \"Buy an item on our wishlist for us\")\n\n<!-- /BADGES -->\n\n\n<!-- DESCRIPTION/ -->\n\nWork with processes safely and easily with Node.js\n\n<!-- /DESCRIPTION -->\n\n\n<!-- INSTALL/ -->\n\n## Install\n\n### [NPM](http://npmjs.org/)\n- Use: `require('safeps')`\n- Install: `npm install --save safeps`\n\n<!-- /INSTALL -->\n\n\n## Usage\n\n``` javascript\nvar safeps = require('safeps');\n```\n\n### Processes\n\n- `openProcess(task)` fire a process task, and keep it open until the task's completion callback fires\n\t- `task(complete)`\n- `spawn(command, opts?, next?)` spawn a process, with respect to the maximum amount of processes we can open at once\n\t- `command` an array of arguments to execute\n\t- `opts={safe:true, read:true, output:false, stdin:null}` options are also sent on to `require('child_process').spawn`\n\t\t- `safe` whether or not we should attempt to get the absolute executable path of the command to execute via `require('safeps').getExecPath`\n\t\t- `read` whether or not we should listen to the child process's stdout and stderr streams for use in the completion callback\n\t\t- `output` if set to `true` will output the child process's stdout to our process's stdout, and provide those values in the completion callback\n\t\t- `outputPrefix` if set to a string, this string will be outputted before each line of the output\n\t\t- `stdin` if set will be written to the child process's stdin\n\t- `next(err, stdout, stderr, code, signal)`\n- `spawnMultiple(commands, opts?, next?)` spawn multiple processes, forwards on to `require('safeps').spawn`\n\t- `commands` an array of commands to execute\n\t- `opts={concurrency:1}` options are also sent on to `require('safeps').spawn`\n\t\t- `concurrency` how many processes should we execute at once?\n\t- `next(err, results)`\n\t\t- `results = [result...]`\n\t\t\t- `result = [err, stdout, stderr, code, signal]`\n- `spawnCommand(command, args, opts?, next?)` alias of `require('safeps').spawn` but with the `command` prefixed to the `args`, e.g. `spawnCommand('git', 'status')`\n- `spawnCommands(command, multiArgs, opts?, next?` alias of `require('safeps').spawnMultiple` but with the `command` prefixed to the `multiArgs`, e.g. `spawnCommands('git', [['status'],['pull']])`\n- `exec(command, opts?, next?)` execute a process, with respect to the maximum amount of processes we can open at once\n\t- `command` a string to execute\n\t- `opts={output:false}` options are also sent on to `require('child_process').exec`\n\t\t- `output` if set to `true` will set the `stdio` option to `inherit` which will output the child process's stdout and stderr to our own\n\t- `next(err, stdout, stderr)`\n- `execMultiple(commands, opts, next)` execute multiple processes, forwards on to `require('safeps').exec`\n\t- `commands` is an array of commands to execute\n\t- `opts={concurrency:1}` options are also sent to `require('safeps').exec`\n\t\t- `concurrency` how many processes should we execute at once?\n\t- `next(err, results)`\n\t\t- `results = [result...]`\n\t\t\t- `result = [err, stdout, stderr]`\n\n\n### Paths\n\n- `determineExecPath(possibleExecPaths, next)` determine an executable path from a list\n\t- `possibleExecPaths` an array of possible executable paths that we shall evaluate\n\t- `next(err, execPath)`\n- `getEnvironmentPaths()` returns an array of the environment paths for executables\n- `getStandardExecPaths(execName?)` return an array of the the environment paths for executables with the cwd prepended\n\t- `execName` if provided, is added onto each of the paths\n- `getExecPath(execName, next)` get the absolute executable path, forwards to `get#{execName}Path` when appropriate\n\t- `next(err, execPath)`\n- `getHomePath(next)` get the user's home path\n\t- `next(err, homePath)`\n- `getTmpPath(next)` get the temporary path\n\t- `next(err, tmpPath)`\n- `getGitPath(next)` get the git path\n\t- `next(err, gitPath)`\n- `getNodePath(next)` get the node path\n\t- `next(err, nodePath)`\n- `getNpmPath(next)` get the npm path\n\t- `next(err, npmPath)`\n\n\n### Modules\n\n- `initGitRepo(opts, next?)` get the git path, forwards on to `require('safeps').spawnCommand`\n\t- `opts={cwd:process.cwd(), url:null, remote:'origin', branch:'master'}` options are also sent on to `require('safeps').spawnCommand`\n\t\t- `cwd` the path to initialize the repo to\n\t\t- `url` the url to initialize\n\t\t- `remote` the remote name to associate the `url` to\n\t\t- `branch` the branch name to initialize the repo to\n\t- `next(err, results)`, `results = [result...]`, `result = [err, stdout, stderr, code, signal]`\n- `initOrPullGitRepo(opts, next?)` if the path exists, update it, otherwise initialize it, forwards on to `require('safeps').spawnCommand`\n\t- `opts={cwd:process.cwd(), url:null, remote:'origin', branch:'master'}` options are also sent on to `require('safeps').spawnCommand`\n\t- `next(err, method, results)`\n\t\t- `method` is either `pull` or `init` depending on the method used\n\t\t- `results = [result...]`\n\t\t\t- `result = [err, stdout, stderr, code, signal]`\n- `initNodeModules(opts, next?)` initialize node modules, forwards on to `require('safeps').spawn`\n\t- `opts={cwd:process.cwd(), args:[], force:false}` options are also sent on to `require('safeps').spawnCommand`\n\t\t- `cwd` the path to initialize the repo to\n\t\t- `args` an array of arguments to add onto the initialize command\n\t\t- `force` whether or not to still initialize modules if `node_modules` already exists\n\t- `next(err, results)`, `results = [result...]`, `result = [err, stdout, stderr, code, signal]`\n\n\n### Environment\n\n- `requireFresh(path)` require the file without adding it to the cache\n- `isWindows()` are we running on windows?\n- `getLocaleCode(lang?=process.env.LANG)` get the locale code from a language, e.g. `en_au`\n- `getLanguageCode(localeCode?=getLocaleCode())` get the language code from a locale code, e.g. `en`\n- `getCountryCode(localeCode?=getLocaleCode())` get the country code from a locale code, e.g. `au`\n\n\n<!-- HISTORY/ -->\n\n## History\n[Discover the change history by heading on over to the `HISTORY.md` file.](https://github.com/bevry/safeps/blob/master/HISTORY.md#files)\n\n<!-- /HISTORY -->\n\n\n<!-- CONTRIBUTE/ -->\n\n## Contribute\n\n[Discover how you can contribute by heading on over to the `CONTRIBUTING.md` file.](https://github.com/bevry/safeps/blob/master/CONTRIBUTING.md#files)\n\n<!-- /CONTRIBUTE -->\n\n\n<!-- BACKERS/ -->\n\n## Backers\n\n### Maintainers\n\nThese amazing people are maintaining this project:\n\n- Benjamin Lupton <b@lupton.cc> (https://github.com/balupton)\n\n### Sponsors\n\nNo sponsors yet! Will you be the first?\n\n[![Gratipay donate button](https://img.shields.io/gratipay/bevry.svg)](https://www.gratipay.com/bevry/ \"Donate weekly to this project using Gratipay\")\n[![Flattr donate button](https://img.shields.io/badge/flattr-donate-yellow.svg)](http://flattr.com/thing/344188/balupton-on-Flattr \"Donate monthly to this project using Flattr\")\n[![PayPayl donate button](https://img.shields.io/badge/paypal-donate-yellow.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=QB8GQPZAH84N6 \"Donate once-off to this project using Paypal\")\n[![BitCoin donate button](https://img.shields.io/badge/bitcoin-donate-yellow.svg)](https://coinbase.com/checkouts/9ef59f5479eec1d97d63382c9ebcb93a \"Donate once-off to this project using BitCoin\")\n[![Wishlist browse button](https://img.shields.io/badge/wishlist-donate-yellow.svg)](http://amzn.com/w/2F8TXKSNAFG4V \"Buy an item on our wishlist for us\")\n\n### Contributors\n\nThese amazing people have contributed code to this project:\n\n- [Benjamin Lupton](https://github.com/balupton) <b@lupton.cc> — [view contributions](https://github.com/bevry/safeps/commits?author=balupton)\n- [giodamelio](https://github.com/giodamelio) — [view contributions](https://github.com/bevry/safeps/commits?author=giodamelio)\n- [sfrdmn](https://github.com/sfrdmn) — [view contributions](https://github.com/bevry/safeps/commits?author=sfrdmn)\n\n[Become a contributor!](https://github.com/bevry/safeps/blob/master/CONTRIBUTING.md#files)\n\n<!-- /BACKERS -->\n\n\n<!-- LICENSE/ -->\n\n## License\n\nLicensed under the incredibly [permissive](http://en.wikipedia.org/wiki/Permissive_free_software_licence) [MIT license](http://creativecommons.org/licenses/MIT/)\n\nCopyright &copy; 2013+ Bevry Pty Ltd <us@bevry.me> (http://bevry.me)\n<br/>Copyright &copy; 2011-2012 Benjamin Lupton <b@lupton.cc> (http://balupton.com)\n\n<!-- /LICENSE -->\n\n\n",
  "readmeFilename": "README.md",
  "_id": "safeps@2.2.13",
  "_from": "safeps@>=2.2.6 <3.0.0"
}
